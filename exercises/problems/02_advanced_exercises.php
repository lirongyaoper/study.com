<?php
/**
 * 进阶练习题集
 * 
 * 这些练习题涵盖更复杂的递归应用
 * 包括回溯、动态规划、树操作等
 */

echo "=== PHP 递归进阶练习题 ===\n\n";

/**
 * 练习 1：生成所有可能的括号组合
 * 
 * 给定 n 对括号，生成所有有效的括号组合
 * 例如：n = 3 时，结果为：
 * ["((()))", "(()())", "(())()", "()(())", "()()()"]
 * 
 * 提示：
 * - 使用回溯法
 * - 记录已使用的左括号和右括号数量
 * - 确保右括号不超过左括号
 */
function generateParentheses($n) {
    // TODO: 实现这个函数
}

/**
 * 练习 2：解决数独谜题
 * 
 * 给定一个 9x9 的数独谜题（0 表示空格），求解它
 * 
 * 提示：
 * - 使用回溯法
 * - 找到空格，尝试填入 1-9
 * - 检查行、列、3x3 方格的有效性
 */
function solveSudoku(&$board) {
    // TODO: 实现这个函数
}

/**
 * 练习 3：找出所有子集
 * 
 * 给定一个不含重复元素的数组，返回所有可能的子集
 * 例如：[1,2,3] 的子集为：
 * [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]
 * 
 * 提示：
 * - 对每个元素，可以选择包含或不包含
 * - 使用递归探索所有可能性
 */
function subsets($nums) {
    // TODO: 实现这个函数
}

/**
 * 练习 4：找零钱问题
 * 
 * 给定不同面额的硬币和一个总金额，计算最少需要多少个硬币
 * 如果无法凑出，返回 -1
 * 
 * 例如：coins = [1, 2, 5], amount = 11
 * 返回 3 (11 = 5 + 5 + 1)
 * 
 * 提示：
 * - 使用记忆化递归
 * - 尝试每种硬币，选择最优解
 */
function coinChange($coins, $amount) {
    // TODO: 实现这个函数
}

/**
 * 练习 5：最长公共子序列
 * 
 * 找出两个字符串的最长公共子序列的长度
 * 子序列不要求连续，但要保持相对顺序
 * 
 * 例如："ABCDGH" 和 "AEDFHR" 的 LCS 是 "ADH"，长度为 3
 * 
 * 提示：
 * - 如果最后一个字符相同，LCS = 1 + LCS(去掉最后字符)
 * - 如果不同，LCS = max(LCS(str1去掉最后, str2), LCS(str1, str2去掉最后))
 */
function longestCommonSubsequence($str1, $str2) {
    // TODO: 实现这个函数
}

/**
 * 练习 6：平衡二叉树检查
 * 
 * 判断一个二叉树是否是高度平衡的
 * 平衡二叉树：每个节点的左右子树高度差不超过 1
 * 
 * 提示：
 * - 递归计算每个节点的高度
 * - 同时检查平衡性
 * - 如果发现不平衡，立即返回
 */
class TreeNode {
    public $val;
    public $left;
    public $right;
    
    function __construct($val = 0, $left = null, $right = null) {
        $this->val = $val;
        $this->left = $left;
        $this->right = $right;
    }
}

function isBalanced($root) {
    // TODO: 实现这个函数
}

/**
 * 练习 7：单词拆分
 * 
 * 给定一个字符串和一个单词字典，判断字符串是否可以被拆分为字典中的单词
 * 
 * 例如：s = "leetcode", wordDict = ["leet", "code"]
 * 返回 true
 * 
 * 提示：
 * - 使用记忆化递归
 * - 尝试每个可能的拆分点
 */
function wordBreak($s, $wordDict) {
    // TODO: 实现这个函数
}

/**
 * 练习 8：排列组合
 * 
 * 给定一个不含重复数字的数组，返回其所有可能的全排列
 * 
 * 例如：[1,2,3] 的全排列为：
 * [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]
 * 
 * 提示：
 * - 使用回溯法
 * - 交换元素位置来生成不同排列
 */
function permute($nums) {
    // TODO: 实现这个函数
}

/**
 * 练习 9：迷宫最短路径
 * 
 * 在一个迷宫中找到从起点到终点的最短路径
 * 0 表示可通行，1 表示墙壁
 * 
 * 提示：
 * - 使用 BFS 或带记忆化的 DFS
 * - 记录已访问的位置避免重复
 * - 返回最短路径长度，如果无法到达返回 -1
 */
function shortestPath($maze, $start, $end) {
    // TODO: 实现这个函数
}

/**
 * 练习 10：表达式求值
 * 
 * 实现一个简单的数学表达式求值器
 * 支持 +, -, *, / 和括号
 * 
 * 例如："2*(3+4)" 应该返回 14
 * 
 * 提示：
 * - 使用递归下降解析
 * - 处理运算符优先级
 * - 递归处理括号内的表达式
 */
function evaluateExpression($expression) {
    // TODO: 实现这个函数
}

// 测试数据和期望结果
echo "=== 测试用例 ===\n\n";

echo "练习 1 - 括号生成：\n";
echo "n = 3 时应该生成 5 种组合\n\n";

echo "练习 2 - 数独：\n";
$sudoku = [
    [5,3,0,0,7,0,0,0,0],
    [6,0,0,1,9,5,0,0,0],
    [0,9,8,0,0,0,0,6,0],
    [8,0,0,0,6,0,0,0,3],
    [4,0,0,8,0,3,0,0,1],
    [7,0,0,0,2,0,0,0,6],
    [0,6,0,0,0,0,2,8,0],
    [0,0,0,4,1,9,0,0,5],
    [0,0,0,0,8,0,0,7,9]
];
echo "测试数独谜题已准备\n\n";

echo "练习 3 - 子集：\n";
echo "[1,2,3] 应该生成 8 个子集\n\n";

echo "练习 4 - 找零钱：\n";
echo "coins = [1,2,5], amount = 11 应该返回 3\n\n";

echo "练习 5 - 最长公共子序列：\n";
echo "'ABCDGH' 和 'AEDFHR' 的 LCS 长度应该是 3\n\n";

echo "练习 6 - 平衡二叉树：\n";
echo "准备测试用例...\n\n";

echo "练习 7 - 单词拆分：\n";
echo "s = 'leetcode', dict = ['leet','code'] 应该返回 true\n\n";

echo "练习 8 - 排列：\n";
echo "[1,2,3] 应该生成 6 种排列\n\n";

echo "练习 9 - 迷宫最短路径：\n";
$maze = [
    [0,0,1,0,0],
    [0,0,0,0,0],
    [0,0,0,1,0],
    [1,1,0,1,1],
    [0,0,0,0,0]
];
echo "5x5 迷宫已准备\n\n";

echo "练习 10 - 表达式求值：\n";
echo "'2*(3+4)' 应该返回 14\n";
echo "'10+2*6' 应该返回 22\n\n";

echo "=== 挑战提示 ===\n";
echo "1. 这些题目都需要深入理解递归和回溯\n";
echo "2. 注意使用记忆化优化重复计算\n";
echo "3. 画图帮助理解递归过程\n";
echo "4. 先从简单的测试用例开始\n";
echo "5. 注意边界条件的处理\n\n";

echo "完成后查看 solutions/02_advanced_solutions.php 对比答案！\n";
